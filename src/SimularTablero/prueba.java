/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * prueba.java
 *
 * Created on 03-09-2012, 09:05:10 AM
 */
package SimularTablero;

import java.awt.Color;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

/**
 *
 * @author NIGHTMARE
 */
public class prueba extends javax.swing.JFrame {
    Object objetos[][];
    int posi;
    int posj;
    boolean highlight;
    Timer time;
    TimerTask execute;
    int cantObjetos;
    boolean timeBool;
    int columnasMov;
    /** Creates new form prueba */
    public prueba() {
        initComponents();
        this.cantObjetos=7;
        objetos=new Object[this.cantObjetos][this.cantObjetos];
        this.posi=0;
        this.posj=0;
        this.columnasMov=0;
        this.setSize(750,600);
        iniciarObjetos();
        addListener();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jButton1.setText("Ejecutar");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(580, 10, 100, 23);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-725)/2, (screenSize.height-562)/2, 725, 562);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        if(!this.timeBool){
            this.execute=new TimerTask(){
                @Override
                public void run() {
                    moveImage();
                }            
            };
            this.setImageToNormal();
            this.colocarImagen(0,0);
            this.time.scheduleAtFixedRate(execute, 500, 100);
            this.timeBool=true;
            this.jButton1.setText("Stop");
        }else{
            this.execute.cancel();
            this.timeBool=false;
            this.jButton1.setText("Ejecutar");
            this.columnasMov=0;
        }
    }//GEN-LAST:event_jButton1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(prueba.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(prueba.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(prueba.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(prueba.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new prueba().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables

    private void iniciarObjetos(){
        
        this.time=new Timer();
        for(int i=0;i<objetos.length;i++){
            for(int e=0;e<objetos[i].length;e++){
                objetos[i][e]=new JLabel();
                ((JLabel)objetos[i][e]).setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                ((JLabel)objetos[i][e]).setBounds(75*e+35,75*i+35,75,75);
            }    
        }
        for(int i=0;i<objetos.length;i++){
            for(int e=0;e<objetos.length;e++){
                this.getContentPane().add(((JLabel)objetos[i][e]));
            }
        }
        colocarImagen(this.posi,this.posj);
        
        
    }
    public void validarMovimiento(int fila,int cola){
        //Ejemplo de como validar un movimiento....
        
//        boolean val=verificarMovimiento(fila,cola);
//        if(val==true){
//            String pathNegro=getClass().getResource("421876_386943434666879_280246188669938_1440827_501410493_n.jpg").getPath();
//            String pathBlanco=getClass().getResource("blanca.jpg").getPath();
//            ImageIcon imagen;
//            if(turno==0){
//                
//                imagen=new ImageIcon(pathNegro);
//                
//            }else{
//                imagen=new ImageIcon(pathBlanco);
//            }
//            ImageIcon red=new ImageIcon(imagen.getImage().getScaledInstance(100, 100, Image.SCALE_DEFAULT));
//            ((JLabel)objetos[fila][cola]).setIcon(red);
        if(this.posi==fila && this.posj==cola){
            this.highlight=true;
            ((JLabel)this.objetos[fila][cola]).setBorder(BorderFactory.createLineBorder(Color.BLUE));
        }else if(this.highlight){
            setImageToNormal();
            this.colocarImagen(fila, cola);
            this.highlight=false;
        }
    }

    private void addListener() {
        for(int i=0;i<objetos.length;i++){
            for(int j=0;j<objetos[i].length;j++){
                final int fila=i;
                final int col=j;
                ((JLabel)objetos[i][j]).addMouseListener(new MouseAdapter(){
                    @Override
                    public void mouseClicked(MouseEvent e){
                        validarMovimiento(fila,col);
                    }
                });
            }
        }
    }

    private void colocarImagen(int i, int j) {
        ImageIcon image=new ImageIcon(getClass().getResource("421876_386943434666879_280246188669938_1440827_501410493_n.jpg").getPath());
        ImageIcon imagen=new ImageIcon(image.getImage().getScaledInstance(100,100,Image.SCALE_DEFAULT));
        ((JLabel)this.objetos[i][j]).setIcon(imagen);
        ((JLabel)this.objetos[i][j]).setBorder(BorderFactory.createLineBorder(Color.RED));
        this.posi=i;
        this.posj=j;
    }

    private void setImageToNormal() {
        ((JLabel)this.objetos[this.posi][this.posj]).setIcon(null);
        ((JLabel)this.objetos[this.posi][this.posj]).setBorder(BorderFactory.createLineBorder(Color.BLACK));
    }
    private void moveImage(){
        this.setImageToNormal();
        
        if(this.columnasMov==0){
            this.colocarImagen(posi, ++posj);
            if(posj==this.cantObjetos-1)
                this.columnasMov++;
        }else if(this.columnasMov==1){
            this.colocarImagen(++posi,posj);
            if(posi==this.cantObjetos-1)
                this.columnasMov++;
        }else if(this.columnasMov==2){
            this.colocarImagen(posi, --posj);
            if(posj==0)
                this.columnasMov++;
        }else if(this.columnasMov==3){
            this.colocarImagen(--posi, posj);
            if(this.posi==0)
                this.columnasMov=0;
        }
    }
}
